+package c2eo.tests

+alias c2eo.stdio.printf
+alias c2eo.ctypes.c_int32
+alias c2eo.ctypes.c_float64
+alias c2eo.coperators.abs
+alias c2eo.coperators.add
+alias c2eo.coperators.and
+alias c2eo.coperators.as-bool
+alias c2eo.coperators.as-float
+alias c2eo.coperators.as-int
+alias c2eo.coperators.as-string
+alias c2eo.coperators.div
+alias c2eo.coperators.eq
+alias c2eo.coperators.geq
+alias c2eo.coperators.greater
+alias c2eo.coperators.leq
+alias c2eo.coperators.less
+alias c2eo.coperators.mod
+alias c2eo.coperators.mul
+alias c2eo.coperators.neg
+alias c2eo.coperators.neq
+alias c2eo.coperators.not
+alias c2eo.coperators.or
+alias c2eo.coperators.pow
+alias c2eo.coperators.sub
+alias c2eo.coperators.write
+alias c2eo.coperators.bit-not
+alias c2eo.coperators.bit-or
+alias c2eo.coperators.bit-and
+alias c2eo.coperators.bit-xor
+alias c2eo.coperators.shift-left
+alias c2eo.coperators.shift-right

[] > operatorsC

  c_int32 11 > ai
  c_int32 5 > bi

  c_float64 3.5 > af
  c_float64 5.2 > bf

  memory > c

  seq > @
    write c (add ai bi)
    printf "write c (add %d %d) -> c = %s\n" ai bi (as-string c)

    write c (and ai bi)
    printf "write c (and %d %d) -> c = %s\n" ai bi (as-string c)

    write c (div ai bi)
    printf "write c (div %d %d) -> c = %s\n" ai bi (as-string c)

    write c (eq ai bi)
    printf "write c (eq %d %d) -> c = %s\n" ai bi (as-string c)

    write c (geq ai bi)
    printf "write c (geq %d %d) -> c = %s\n" ai bi (as-string c)

    write c (greater ai bi)
    printf "write c (greater %d %d) -> c = %s\n" ai bi (as-string c)

    write c (leq ai bi)
    printf "write c (leq %d %d) -> c = %s\n" ai bi (as-string c)

    write c (less ai bi)
    printf "write c (less %d %d) -> c = %s\n" ai bi (as-string c)

    write c (mod ai bi)
    printf "write c (mod %d %d) -> c = %s\n" ai bi (as-string c)

    write c (mul ai bi)
    printf "write c (mul %d %d) -> c = %s\n" ai bi (as-string c)

    write c (neq ai bi)
    printf "write c (neq %d %d) -> c = %s\n" ai bi (as-string c)

    write c (or ai bi)
    printf "write c (or %d %d) -> c = %s\n" ai bi (as-string c)

    write c (pow ai bi)
    printf "write c (pow %d %d) -> c = %s\n" ai bi (as-string c)

    write c (sub ai bi)
    printf "write c (sub %d %d) -> c = %s\n" ai bi (as-string c)

    write c (abs ai)
    printf "write c (abs %d) -> c = %s\n" ai (as-string c)

    write c (as-bool ai)
    printf "write c (as-bool %d) -> c = %b\n" ai c

    write c (as-float ai)
    printf "write c (as-float %d) -> c = %s\n" ai (as-string c)

    write c (neg ai)
    printf "write c (neg %d) -> c = %s\n" ai (as-string c)

    write c (not ai)
    printf "write c (not %d) -> c = %s\n" ai (as-string c)

    write c (add af bf)
    printf "write c (add %f %f) -> c = %s\n" af bf (as-string c)

    write c (and af bf)
    printf "write c (and %f %f) -> c = %s\n" af bf (as-string c)

    write c (div af bf)
    printf "write c (div %f %f) -> c = %s\n" af bf (as-string c)

    write c (eq af bf)
    printf "write c (eq %f %f) -> c = %s\n" af bf (as-string c)

    write c (geq af bf)
    printf "write c (geq %f %f) -> c = %s\n" af bf (as-string c)

    write c (greater af bf)
    printf "write c (greater %f %f) -> c = %s\n" af bf (as-string c)

    write c (leq af bf)
    printf "write c (leq %f %f) -> c = %s\n" af bf (as-string c)

    write c (less af bf)
    printf "write c (less %f %f) -> c = %s\n" af bf (as-string c)

    write c (mul af bf)
    printf "write c (mul %f %f) -> c = %s\n" af bf (as-string c)

    write c (neq af bf)
    printf "write c (neq %f %f) -> c = %s\n" af bf (as-string c)

    write c (or af bf)
    printf "write c (or %f %f) -> c = %s\n" af bf (as-string c)

    write c (pow af bf)
    printf "write c (pow %f %f) -> c = %s\n" af bf (as-string c)

    write c (sub af bf)
    printf "write c (sub %f %f) -> c = %s\n" af bf (as-string c)

    write c (abs af)
    printf "write c (abs %f) -> c = %s\n" af (as-string c)

    write c (as-bool af)
    printf "write c (as-bool %f) -> c = %b\n" af c

    write c (as-int af)
    printf "write c (as-int %f) -> c = %s\n" af (as-string c)

    write c (neg af)
    printf "write c (neg %f) -> c = %s\n" af (as-string c)

    write c (not af)
    printf "write c (not %f) -> c = %s\n" af (as-string c)

    write c (bit-not ai)
    printf "write c (bit-not %d) -> c = %s\n" ai (as-string c)

    write c (bit-and ai bi)
    printf "write c (bit-and %d %d) -> c = %s\n" ai bi (as-string c)

    write c (bit-or ai bi)
    printf "write c (bit-or %d %d) -> c = %s\n" ai bi (as-string c)

    write c (bit-xor ai bi)
    printf "write c (bit-xor %d %d) -> c = %s\n" ai bi (as-string c)

    write c (shift-left ai 2)
    printf "write c (shift-left %d %d) -> c = %s\n" ai 2 (as-string c)

    write c (shift-right ai 2)
    printf "write c (shift-left %d %d) -> c = %s\n" ai 2 (as-string c)
